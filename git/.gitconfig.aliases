#
# Include this in your own .gitconfig by using the
# [include] directive with the path to this file
#
# [include]
#    path = ~/.gitconfig.aliases
#
# If you don't have any existing includes, you can add this via the following command
# 
#   git config --global include.path ~/.gitconfig.aliases
#

[alias]
	#Highlights individual character changes and space changes - https://stackoverflow.com/a/25634420/171877
	dif = diff --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
	ri = "!f() { git rebase -i HEAD~$1; }; f"
	st = status
	sb = branch --sort=-committerdate
	pf = push -f --force-with-lease
	co = checkout
	cl = clean -fxd -e Output
	dc = diff --cached
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	le = log --oneline --decorate
	#Last 20 or $1 recent worked on branch
	allrecent = "!f() { git for-each-ref --sort=-committerdate refs/remotes --count=${1-20} --color=always --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) - %(color:bold blue)%(authorname) %(color:green)(%(committerdate:relative))%(color:reset) - %(color:bold red)%(objectname:short)%(color:reset)' | sed "s/origin.//"; }; f"
	#My last recent worked on branch, or the one filtered by $1
	recent = "!f() { username=${1-$(git config --get user.name)}; git allrecent | grep -i \"$username\"; }; f"
	standup =  "!f() { username=$(git config --get user.name); git log --since yesterday --oneline --author \"$username\" --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }; f"
	fl = log -u
	dl = "!git ll -1"
	dlc = diff --cached HEAD^
	dr = "!f() { git diff "$1"^.."$1"; }; f"
	lc = "!f() { git ll "$1"^.."$1"; }; f"
	diffr = "!f() { git diff "$1"^.."$1"; }; f"
	f = "!git ls-files | where {$_ -match '$1'}"
	create-pull-request = !sh -c 'stash pull-request \\$0'
	up = !git pull --rebase --prune $@ && git submodule update --init --recursive
	save = "!f() { git add -A; if [ $# -eq 0 ]; then msg='SAVEPOINT'; git commit -m \"$msg\"; else git commit -m \"$1\" ; fi }; f" 
	undo = reset HEAD~1 --mixed
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
	amend = commit -a --amend
	bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
	bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
	find = "!f() { git log -S ${1} --source --all; }; f"
	alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
	open = "!explorer `git config remote.origin.url`"
	browse = "!git open"
	rview = "!f() { currentBranch=$(git rev-parse --abbrev-ref HEAD); lastMerge=$1; git checkout -b 'review/'$currentBranch $currentBranch && git reset --soft $lastMerge; }; f"
	review = "!f() { currentBranch=$(git rev-parse --abbrev-ref HEAD); lastMerge=$(git log --merges --format=%H -n 1); git checkout -b 'review/'$currentBranch $currentBranch && git reset --soft $lastMerge; }; f"
	rdone = "!f() { currentBranch=$(git rev-parse --abbrev-ref HEAD); if [[ ${currentBranch:0:7} != 'review/' ]]; then echo You are not on a review branch!; exit 1; fi && git reset --hard && git checkout ${currentBranch:7} && git branch -d $currentBranch; }; f"
	# Innoveo aliases
	jiran = "!f() { git rev-parse --abbrev-ref HEAD | sed "s/feature.//" | grep -o -E "SKYE+-[0-9]+"; }; f"
	# Save prepending the JIRA ticket number
	s = "!f() { jiraid=$(git jiran); if [ $# -eq 0 ]; then msg='SAVEPOINT'; git save \"$jiraid $msg\"; else git save \"$jiraid $1\"; fi; }; f" 
	# Determine the release branch with blank parameter if their is only one release branch or using first param if there is more (e.g. git rel 7.24)
	rel = "!f() { git branch -r | if [[ $1 != '' ]]; then grep "origin/release/.*$1"; else grep "origin/release/"; fi; }; f"
	# Create new feature branch
	nfb = "!f() { releaseBranch=$(git rel); if [[ "$releaseBranch" = *$'\n'* ]] ; then git rel; echo "use enfb - Extended Create new feature branch"; else git fetch; git checkout --no-track -b feature/SKYE-$1 $releaseBranch; fi; }; f"
	# Extended Create new feature branch - When there is more than one release branch existing
	enfb = "!f() { releaseBranch=$(git rel $1); git fetch; git checkout --no-track -b feature/SKYE-$2 $releaseBranch; }; f"
	# Find feature branch from ticket number
	fb = "!f() { git branch -a | grep "feature/.*$1.*" | sed "s/remotes.//" | sed "s/origin.//" | sort -u | head -1; }; f"	
	# Checkout feature branch from ticket number
	cfb = "!f() { featureBranch=$(git fb $1); git checkout $featureBranch; }; f"
	# Review feature branch from ticket number
	rfb = "!f() { git fetch; featureBranch=$(git fb $1); git checkout $featureBranch; git pull; git review; }; f"
